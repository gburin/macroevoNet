setwd("../")
library("rmarkdown")
setwd("./docs")
render("exploratory_plots.Rmd", encoding = "utf8")
render("exploratory_plots.Rmd", encoding = "utf8")
render("exploratory_plots.Rmd", encoding = "utf8")
render("exploratory_plots.Rmd", encoding = "utf8")
render("exploratory_plots.Rmd", encoding = "utf8")
render("exploratory_plots.Rmd", encoding = "utf8")
render("exploratory_plots.Rmd", encoding = "utf8")
render("exploratory_plots.Rmd", encoding = "utf8")
render("exploratory_plots.Rmd", encoding = "utf8")
q()
n
dir()
dir("../")
dir("../R")
setwd("../")
aggregate(fulldata.net.bin$pca, by = list(fulldata.net.bin$order), FUN = median)
aggregate(fulldata.net.bin$epsilon.eric0102, by = list(fulldata.net.bin$order), FUN = median)
plot(aggregate(fulldata.net.bin$epsilon.eric0102, by = list(fulldata.net.bin$order), FUN = median)$x[,2] ~ aggregate(fulldata.net.bin$epsilon.eric0102, by = list(fulldata.net.bin$order), FUN = median)$x[,2])
plot(aggregate(fulldata.net.bin$epsilon.eric0102, by = list(fulldata.net.bin$order), FUN = median)$x ~ aggregate(fulldata.net.bin$epsilon.eric0102, by = list(fulldata.net.bin$order), FUN = median)$x)
aggregate(fulldata.net.bin$epsilon.eric0102, by = list(fulldata.net.bin$order), FUN = median)$x
plot(aggregate(fulldata.net.bin$pca, by = list(fulldata.net.bin$order), FUN = median)$x ~ aggregate(fulldata.net.bin$epsilon.eric0102, by = list(fulldata.net.bin$order), FUN = median)$x)
temp.family$family
table(temp.family$order)
table(temp.family$order)
plot(fulldata.net.bin$degree.z ~ fulldata.net.bin$closeness.z)
plot(fulldata.net.bin$degree.z ~ fulldata.net.bin$katz.z)
library("rmarkdown")
setwd("./docs/")
render("exploratory_plots.Rmd")
render("exploratory_plots.Rmd")
render("exploratory_plots.Rmd")
render("exploratory_plots.Rmd")
X11()
X11()
dev.off()
dev.off()
dev.off)
dev.off()
dev.off()
render("exploratory_plots.Rmd")
render("exploratory_plots.Rmd")
q()
n
library("rmarkdown")
render("supp_mat.Rmd")
library("cowplot")
render("supp_mat.Rmd")
render("supp_mat.Rmd")
render("supp_mat.Rmd")
render("supp_mat.Rmd")
render("supp_mat.Rmd")
q()
n
render("supp_mat.Rmd")
render("supp_mat.Rmd")
q()
n
library("rmarkdown")
render("Burin_et_al_biorxiv_2020.Rmd")
render("Burin_et_al_biorxiv_2020.Rmd")
render("Burin_et_al_biorxiv_2020.Rmd", encoding = "utf8")
render("Burin_et_al_biorxiv_2020.Rmd", encoding = "utf8")
render("Burin_et_al_biorxiv_2020.Rmd", encoding = "utf8")
render("Burin_et_al_biorxiv_2020.Rmd", encoding = "utf8")
render("Burin_et_al_biorxiv_2020.Rmd", encoding = "utf8")
render("Burin_et_al_biorxiv_2020.Rmd", encoding = "utf8")
render("Burin_et_al_biorxiv_2020.Rmd", encoding = "utf8")
render("Burin_et_al_biorxiv_2020.Rmd", encoding = "utf8")
render("Burin_et_al_biorxiv_2020.Rmd", encoding = "utf8")
render("Burin_et_al_biorxiv_2020.Rmd", encoding = "utf8")
render("Burin_et_al_biorxiv_2020.Rmd", encoding = "utf8")
render("Burin_et_al_biorxiv_2020.Rmd", encoding = "utf8")
render("Burin_et_al_biorxiv_2020.Rmd", encoding = "utf8")
render("Burin_et_al_biorxiv_2020.Rmd", encoding = "utf8")
render("Burin_et_al_biorxiv_2020.Rmd", encoding = "utf8")
render("Burin_et_al_biorxiv_2020.Rmd", encoding = "utf8")
render("Burin_et_al_biorxiv_2020.Rmd", encoding = "utf8")
q()
n
library("rmarkdown")
render("Burin_et_al_biorxiv_2020.Rmd", encoding = "utf8")
render("Burin_et_al_biorxiv_2020.Rmd", encoding = "utf8")
render("Burin_et_al_biorxiv_2020.Rmd", encoding = "utf8")
render("Burin_et_al_biorxiv_2020.Rmd", encoding = "utf8")
render("Burin_et_al_biorxiv_2020.Rmd", encoding = "utf8")
render("Burin_et_al_biorxiv_2020.Rmd", encoding = "utf8")
render("Burin_et_al_biorxiv_2020.Rmd", encoding = "utf8")
render("Burin_et_al_biorxiv_2020.Rmd", encoding = "utf8")
q()
n
render("Burin_et_al_biorxiv_2020.Rmd", encoding = "utf8")
rmarkdown::render("Burin_et_al_biorxiv_2020.Rmd", encoding = "utf8")
rmarkdown::render("Burin_et_al_biorxiv_2020.Rmd", encoding = "utf8")
install.packages("rmarkdown")
library("rmarkdown")
q()
n
library("rmarkdown")
rmarkdown::render("Burin_et_al_biorxiv_2020.Rmd", encoding = "utf8")
rmarkdown::render("Burin_et_al_biorxiv_2020.Rmd", encoding = "utf8")
q()
n
library("rmarkdown")
rmarkdown::render("Burin_et_al_biorxiv_2020.Rmd", encoding = "utf8")
q()
n
library("rmarkdown")
render("Burin_et_al_biorxiv_2020.Rmd")
render("Burin_et_al_biorxiv_2020.Rmd")
render("Burin_et_al_biorxiv_2020.Rmd")
render("Burin_et_al_biorxiv_2020.Rmd")
render("Burin_et_al_biorxiv_2020.Rmd")
render("Burin_et_al_biorxiv_2020.Rmd")
render("Burin_et_al_biorxiv_2020.Rmd")
render("Burin_et_al_biorxiv_2020.Rmd")
render("Burin_et_al_biorxiv_2020.Rmd")
render("Burin_et_al_biorxiv_2020.Rmd")
render("Burin_et_al_biorxiv_2020.Rmd")
render("Burin_et_al_biorxiv_2020.Rmd")
render("Burin_et_al_biorxiv_2020.Rmd")
render("Burin_et_al_biorxiv_2020.Rmd")
render("Burin_et_al_biorxiv_2020.Rmd")
render("Burin_et_al_biorxiv_2020.Rmd")
render("Burin_et_al_biorxiv_2020.Rmd")
render("Burin_et_al_biorxiv_2020.Rmd")
render("Burin_et_al_biorxiv_2020.Rmd")
render("Burin_et_al_biorxiv_2020.Rmd")
render("Burin_et_al_biorxiv_2020.Rmd")
render("Burin_et_al_biorxiv_2020.Rmd")
render("Burin_et_al_biorxiv_2020.Rmd")
render("Burin_et_al_biorxiv_2020.Rmd")
render("Burin_et_al_biorxiv_2020.Rmd")
render("Burin_et_al_biorxiv_2020.Rmd")
getwd()
getwd()
render("Burin_et_al_biorxiv_2020.Rmd")
render("Burin_et_al_biorxiv_2020.Rmd")
render("Burin_et_al_biorxiv_2020.Rmd")
render("Burin_et_al_biorxiv_2020.Rmd")
render("Burin_et_al_biorxiv_2020.Rmd")
q()
n
ls()
ls()
head(clim.pca)
ls()
summary(disp.1.amp.pc1)
ls()
source("../R/plots_diet.R")
str(summary(lm(disp.per.net1$amp ~ disp.per.net1$clim.pc1)))
names(amp.pc1)
head(net.metadata)
library("rmarkdown")
render("supp_mat_2.Rmd")
render("supp_mat_2.Rmd")
render("supp_mat_2.Rmd")
render("supp_mat_2.Rmd")
render("supp_mat_2.Rmd")
render("supp_mat_2.Rmd")
q()
n
library("rmarkdown")
render("supp_mat_2.
render("supp_mat_2.Rmd")
render("supp_mat_2.Rmd")
render("supp_mat_2.Rmd")
render("supp_mat_2.Rmd")
q()
n
library("rmarkdown")
render("supp_mat_2.Rmd")
q()
n
head(net_metadata)
ls()
head(net.]metadata)
head(net.metadata)
render("supp_mat_2.Rmd")
render("supp_mat_2.Rmd")
render("supp_mat_2.Rmd")
render("supp_mat_2.Rmd")
render("supp_mat_2.Rmd")
render("supp_mat_2.Rmd")
render("supp_mat_2.Rmd")
names(net_metadata)
names(net.metadata)
render("supp_mat_2.Rmd")
names(net.metadata)
source("../R/geog_similarity_plots.R")
q()
n
fulldata.net.bin$species[fulldata.net.bin$epsilon.z >= quantile(fulldata.net.bin$epsilon.z, 0.95)]
names(fulldata.net.bin)
fulldata.net.bin$species[fulldata.net.bin$epsilon.z >= quantile(fulldata.net.bin$epsilon.z, 0.95)]
fulldata.net.bin$epsilon.z[fulldata.net.bin$epsilon.z >= quantile(fulldata.net.bin$epsilon.z, 0.95)]
fulldata.net.bin$epsilon.z[fulldata.net.bin$species == "Bleda_syndactylus"]
fulldata.net.bin[fulldata.net.bin$species == "Bleda_syndactylus",]
which(fulldata.net.bin$species == "Bleda_syndactylus")
aggregate(fulldata.net.bin$epsilon.eric0102, by = list(fulldata.net.bin$id), FUN = scale)
aggregate(fulldata.net.bin$epsilon.eric0102, by = list(fulldata.net.bin$id), FUN = scale)$x
unlist(aggregate(fulldata.net.bin$epsilon.eric0102, by = list(fulldata.net.bin$id), FUN = scale)$x)
unlist(aggregate(fulldata.net.bin$epsilon.eric0102, by = list(fulldata.net.bin$id), FUN = scale)$x)[437]
unlist(aggregate(fulldata.net.bin$epsilon.eric3446, by = list(fulldata.net.bin$id), FUN = scale)$x)[437]
unlist(aggregate(fulldata.net.bin$epsilon.hack0006, by = list(fulldata.net.bin$id), FUN = scale)$x)[437]
unlist(aggregate(fulldata.net.bin$epsilon.hack3953, by = list(fulldata.net.bin$id), FUN = scale)$x)[437]
unlist(aggregate(fulldata.net.bin$epsilon.hack3953, by = list(fulldata.net.bin$id), FUN = scale)$x)[437]
unlist(aggregate(fulldata.net.bin$epsilon.hack5417, by = list(fulldata.net.bin$id), FUN = scale)$x)[437]
unlist(aggregate(fulldata.net.bin$epsilon.eric0102, by = list(fulldata.net.bin$id), FUN = scale)$x)
plot(unlist(aggregate(fulldata.net.bin$epsilon.eric0102, by = list(fulldata.net.bin$id), FUN = scale)$x) ~ unlist(aggregate(fulldata.net.bin$epsilon.eric0994, by = list(fulldata.net.bin$id), FUN = scale)$x))
plot(unlist(aggregate(fulldata.net.bin$epsilon.eric0102, by = list(fulldata.net.bin$id), FUN = scale)$x) ~ unlist(aggregate(fulldata.net.bin$epsilon.eric3446, by = list(fulldata.net.bin$id), FUN = scale)$x))
q()
n
names(fulldata.net.bin)
names(net.metadata)
write.table(net.metadata[, -c(5, 9, 11, 12, 13)], file = "~/Downloads/net_metadata.csv", quote = FALSE, sep = ",", row.names = FALSE)
write.table(net.metadata[, -c(5, 9, 11, 12, 13)], file = "~/Downloads/net_metadata.csv", quote = FALSE, sep = ";", row.names = FALSE)
head(net.metadata)
q()
n
render("supp_mat_2.Rmd", output_format = "word_document")
dim(net.metadata)
table(net.metadata$lat_hem)
table(net.metadata$biome)
head(net.metadata)
table(net.metadata$Latitude)
head(fulldata.net.bin)
table(fulldata.net.bin$id)
table(fulldata.net.bin$Latitude)
153/29
153/34
unique(fuldata.net.bin[, c("id", "Latitude")])
unique(fulldata.net.bin[, c("id", "Latitude")])
table(unique(fulldata.net.bin[, c("id", "Latitude")])[,2])
q()
n
library("rmarkdown")
render("Burin_et_al_biorxiv_2021.Rmd")
render("Burin_et_al_biorxiv_2021.Rmd")
render("Burin_et_al_biorxiv_2021.Rmd")
render("Burin_et_al_biorxiv_2021.Rmd")
render("Burin_et_al_biorxiv_2021.Rmd")
q()
n
head(int.tax)
tail(int.tax)
dim(int.tax)
length(resid.famsp)
int.tax[, c("n.plant.families", "n.plant.species")]
paste0("Relationship between PCA centrality of birds and phylogenetic diversity of plants accounting for the total number of plant families, showing that the more central a species is, the more generalist it is concerning the identity of their partners. $R^2$ = ", round(summary(lm(nplantfam.resid ~ int.tax$pca[!is.na(int.tax$phylodiv)]))$adj.r.squared, 4))
render("supp_mat_2.Rmd", output_format = c("pdf_document", "word_document"))
render("supp_mat_2.Rmd", output_format = c("pdf_document", "word_document"))
q()
n
q()
n
library("rmarkdown")
render("Burin_et_al_biorxiv_2021.Rmd")
q()
n
render("supp_mat_2.Rmd", output_format = "pdf_document")
render("supp_mat_2.Rmd", output_format = "pdf_document")
round(summary(lm(nplantfam.resid ~ int.tax$pca[!is.na(int.tax$phylodiv)]))$adj.r.squared, 4)
round(summary(lm(nplantfam.resid ~ int.tax$pca[!is.na(int.tax$phylodiv)]))$adj.r.squared, 4)
render("supp_mat_2.Rmd", output_format = "pdf_document")
render("supp_mat_2.Rmd", output_format = "pdf_document")
render("supp_mat_2.Rmd", output_format = "pdf_document")
render("supp_mat_2.Rmd", output_format = "pdf_document")
render("supp_mat_2.Rmd", output_format = "pdf_document")
q()
n
q()
n
install.packages("stringi")
install.packages("reshape2")
install.packages("stringi")
yes
install.packages("stringi")
yes
yes
install.packages("stringi")
install.packages("stringi")
q()
n
install.packages("stringi")
install.packages(c("rmarkdown", "ggfortify", "ggdist", "cowplot", "ggsci", "patchwork", "kableExtra"))
install.packages(c("rmarkdown", "ggfortify", "ggdist", "cowplot", "ggsci", "patchwork", "kableExtra"))
install.packages("mvtnorm")
install.packages(c("rmarkdown", "ggfortify", "ggdist", "cowplot", "ggsci", "patchwork", "kableExtra"))
install.packages(c("MCMCglmm", "tidyverse", "caper", "plyr"))
install.packages(c("reshape2", "geosphere", "BiocManager"))
BiocManager::install("ggtree")
install.packages(c("igraph", "phytools"))
install.packages(c("centiserve", "ggnewscale"))
install.packages(c("BAMMtools"))
install.packages(c("raster"))
install.packages(c("rgdal"))
install.packages(c("rgdal"))
install.packages(c("rgdal"))
install.packages(c("viridis"))
install.packages(c("ggforce"))
install.packages(c("ggstance"))
install.packages(c("vegan"))
head(resid.plot)
head(resid.plot)
head(resid.plot)
disp.per.net1$amp.resid
head(disp.per.net)
head(disp.per.net1)
q()
n
library("rmarkdown")
render("Burin_et_al_2021_postprint.Rmd")
render("Burin_et_al_2021_postprint.Rmd")
render("Burin_et_al_2021_postprint.Rmd")
render("Burin_et_al_2021_postprint.Rmd")
render("Burin_et_al_2021_postprint.Rmd")
render("Burin_et_al_2021_postprint.Rmd")
render("Burin_et_al_2021_postprint.Rmd")
render("Burin_et_al_2021_postprint.Rmd")
render("Burin_et_al_2021_postprint.Rmd")
render("Burin_et_al_2021_postprint.Rmd")
render("Burin_et_al_2021_postprint.Rmd")
render("Burin_et_al_2021_postprint.Rmd")
render("Burin_et_al_2021_postprint.Rmd")
render("Burin_et_al_2021_postprint.Rmd")
render("Burin_et_al_2021_postprint.Rmd")
q()
n
